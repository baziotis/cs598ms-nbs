{
  "cells": [
    {
      "raw": "import pandas as pd\nimport datetime\npd.set_option('display.max_rows', None)\nfrom IPython.display import Markdown\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nplt.rcParams.update({'font.size': 16})\n\n# read in the data\n\n# old dataset:\n#GM_individual_Tiers = pd.read_csv(\"../input/list-of-kaggle-grandmasters/GM_individual_Tiers.csv\")\n#GM_individual_Tiers = GM_individual_Tiers.rename(columns = {'Comp_Tier':'Competitions', \n#                                                            'Dset_Tier':'Datasets',\n#                                                            'Note_Tier':'Notebooks',\n#                                                            'Disc_Tier':'Discussions'})\n\nMasterAchievements = pd.read_csv(\"../input/MasterAchievements.csv\")\nMasterProfiles = pd.read_csv(\"../input/MasterProfiles.csv\")\n# merge the two files together\nMaster_file = MasterAchievements.merge(MasterProfiles, on = 'UserName')\n# select the Grandmasters from the dataset\nGM_individual_Tiers = Master_file.query(\" Competitions == 'grandmaster' | Datasets == 'grandmaster'| Notebooks == 'grandmaster'| Discussion == 'grandmaster'\").copy()\nGM_individual_Tiers['GM_tier_count'] = GM_individual_Tiers[GM_individual_Tiers.astype(str) == 'grandmaster'].count(axis=1)\n\nn_GMs  = GM_individual_Tiers.shape[0]\nn_4xGM = GM_individual_Tiers.query(\"GM_tier_count == 4\").shape[0]\nn_3xGM = GM_individual_Tiers.query(\"GM_tier_count == 3\").shape[0]\nn_2xGM = GM_individual_Tiers.query(\"GM_tier_count == 2\").shape[0]\n\n# convert User Names into Display Names\nUsers        = pd.read_csv(\"../input/Users.csv\")\n# select the GM users\nUsers_GM     = Users.query(\"PerformanceTier == 4\")\n# name_mapping = dict(Users_GM[['UserName','DisplayName']].values)\n\ndef make_clickable_link(UserName):\n    DisplayName = name_mapping.get(UserName)\n    return DisplayName\n\n# # print a summary\n# now = datetime.datetime.now()\n# display(Markdown('This notebook is refreshed almost daily; latest run ' + now.strftime('%A %B %d, %Y') ))\n\n\n# display(Markdown('### Quick summary'))\n# display(Markdown('There are  ' + f'{n_GMs:,}' + '  kaggle Grandmasters.'))\n# display(Markdown('Out of these there are ' + f'{n_4xGM:,}' + ' quadruple Grandmasters, '\n#                                            + f'{n_3xGM:,}' + ' triple Grandmasters, and '\n#                                            + f'{n_2xGM:,}' + ' double Grandmasters.'))\n# display(Markdown(\"\"))\n\n\n# # take a look\n# GM_individual_Tiers[\"User\"] = GM_individual_Tiers.UserName.map(lambda x: make_clickable_link(x))\n# GM_individual_Tiers_styled  = GM_individual_Tiers[[\"User\",\"Competitions\",\"Datasets\",\"Notebooks\",\"Discussion\",\"Country\",\"GM_tier_count\"]].sort_values(by='GM_tier_count', ascending=False).style.bar(subset=['GM_tier_count'], vmin=0, color='#ddaa17')\n# GM_individual_Tiers_styled.hide_index()",
      "total-ns": 26326041956
    },
    {
      "raw": "# display(Markdown('#### As a table:'))\n# display(Markdown(\"\"))\n\nsummary = GM_individual_Tiers[['Competitions','Datasets','Notebooks','Discussion']].apply(pd.Series.value_counts)\n# summary.loc[['grandmaster','master','expert','contributor']].style.background_gradient(cmap='YlOrBr', axis=None)",
      "total-ns": 5795168
    },
    {
      "raw": "# import plotly.graph_objects as go\n# # see \n# # https://plotly.github.io/plotly.py-docs/generated/plotly.graph_objects.Parcats.html\n\n# tier_colours = {'grandmaster':'#ddaa17','master':'#f76629','expert':'#96508e','contributor':'#20beff'}\n# # create a new column basing the colours on the Competitions GM's.\nGM_individual_Tiers[\"colour_column\"] = GM_individual_Tiers[\"Competitions\"]\n# replace the tier with the tier colour\n# with_colours_df = GM_individual_Tiers.replace({\"colour_column\": tier_colours})\n# color = with_colours_df.colour_column;\n\n# # for a simple plot:\n# #fig = px.parallel_categories(with_colours_df, \n# #                             dimensions=['Competitions','Datasets','Notebooks','Discussions'],\n# #                             color=with_colours_df[\"colour_column\"])\n\n# # Create dimensions\n# Competitions_dim = go.parcats.Dimension(\n#     values=GM_individual_Tiers.Competitions,\n#     categoryorder='array', categoryarray=['grandmaster','master','expert','contributor'], \n#     label=\"Competitions\")\n\n# Datasets_dim = go.parcats.Dimension(\n#     values=GM_individual_Tiers.Datasets,\n#     categoryorder='array', categoryarray=['grandmaster','master','expert','contributor'], \n#     label=\"Datasets\")\n\n# Notebooks_dim = go.parcats.Dimension(\n#     values=GM_individual_Tiers.Notebooks,\n#     categoryorder='array', categoryarray=['grandmaster','master','expert','contributor'], \n#     label=\"Notebooks\")\n\n# Discussions_dim = go.parcats.Dimension(\n#     values=GM_individual_Tiers.Discussion,\n#     categoryorder='array', categoryarray=['grandmaster','master','expert','contributor'], \n#     label=\"Discussions\")\n\n# fig = go.Figure(data = [go.Parcats(dimensions=[Competitions_dim, Datasets_dim, Notebooks_dim, Discussions_dim],\n#         line={'color': color,\n#               'shape': 'hspline'},\n#         #labelfont={'size': 12, 'family': 'Times'},\n#         #tickfont={'size': 12, 'family': 'Times'},\n#         arrangement='freeform')])\n\n# fig.show();",
      "total-ns": 1028455
    },
    {
      "raw": "# display(Markdown('# Country ranking'))\n# display(Markdown('Number of Grandmasters by country'))\n# display(Markdown(\"\"))\n\nGM_countries = GM_individual_Tiers[\"Country\"].value_counts().to_frame()\nGM_countries['Ranking'] = GM_countries.rank(method=\"min\",ascending=False).astype('int')\nGM_countries.sort_values(by='Country', ascending=False)\n# .style.bar(subset=['Country'], vmin=0, color='#ddaa17')",
      "total-ns": 6650263
    },
    {
      "raw": "# Create a list of GM Id\nGM_id_list = Users_GM['Id'].tolist()\n# read in the Meta Kaggle followers file\nfollowers = pd.read_csv(\"../input/UserFollowers.csv\")\n# filter by GM users. Note: \"FollowingUserId\" is the Id of the person being followed\nGM_users = followers[followers['FollowingUserId'].isin(GM_id_list)]\n# now filter by GM followers\nGM_user_follower = GM_users[GM_users['UserId'].isin(GM_id_list)]\n# remove self-following entries \nGM_user_follower = GM_user_follower[GM_user_follower['UserId'] != GM_user_follower['FollowingUserId']]\n\nId_mapping = dict(Users_GM[['Id','UserName']].values)\nname_mapping = dict(Users_GM[['UserName','DisplayName']].values)\n\ndef make_clickable_link_by_Id(Id):\n    UserName = Id_mapping.get(Id)\n    DisplayName = name_mapping.get(UserName)\n    return DisplayName\n\nGM_influencers = GM_user_follower[\"FollowingUserId\"].value_counts().to_frame().reset_index()\n# rename the columns\nGM_influencers.columns = ['GM_Id', 'number_GM_followers']\n# create a \"Ranking\" column\nGM_influencers['Ranking'] = GM_influencers.number_GM_followers.rank(method=\"min\",ascending=False).astype('int')\n# replace GM_Id by display name\nGM_influencers[\"User\"] = GM_influencers.GM_Id.map(lambda x: make_clickable_link_by_Id(x))\nGM_influencers_styled  = GM_influencers[[\"Ranking\",\"User\",\"number_GM_followers\"]].sort_values(by='number_GM_followers', ascending=False).style.bar(subset=['number_GM_followers'], vmin=0, color='#ddaa17')\n# GM_influencers_styled.hide_index()",
      "total-ns": 851189664
    },
    {
      "raw": "# import networkx as nx\n# fig, ax = plt.subplots(figsize=(20,12))\n# G = nx.from_pandas_edgelist(GM_user_follower, 'UserId', 'FollowingUserId', create_using=nx.Graph())\n# nx.draw(G, with_labels=False, node_color=\"#ddaa17\")",
      "total-ns": 219059
    },
    {
      "raw": "",
      "total-ns": 90616
    },
    {
      "raw": "UserAchievements = pd.read_csv('../input/UserAchievements.csv', nrows = 30000000)\n# Quite a few kaggle staff in this section as Tier 4 (hence PerformanceTier == 5)\nGM_Achievements = UserAchievements.query('(Tier == 4) or (Tier == 5)')\n\n# UserAchievements is big, so now delete\ndel UserAchievements\n\nGM_Achievements[\"TierAchievementDate\"] = pd.to_datetime(GM_Achievements[\"TierAchievementDate\"])\nGM_Achievements = GM_Achievements.sort_values(by='TierAchievementDate', ascending=True)\nGM_Achievements.set_index('TierAchievementDate', inplace=True)\nGM_Achievements[\"one\"] = 1\n\nUsers_GM     = Users.query('(PerformanceTier == 4) or (PerformanceTier == 5)')\n# new name mapping to now include kaggle staff\nname_mapping = dict(Users_GM[['UserName','DisplayName']].values)\n\nCompetitions = GM_Achievements.query(\"AchievementType == 'Competitions'\")\nDatasets     = GM_Achievements.query(\"AchievementType == 'Datasets'\")\nScripts      = GM_Achievements.query(\"AchievementType == 'Scripts'\")\nDiscussion   = GM_Achievements.query(\"AchievementType == 'Discussion'\")\n\nUserAchievements_GM_any  = GM_Achievements.drop_duplicates(subset=['UserId'])\nUserAchievements_GM_any  = UserAchievements_GM_any.resample('D').sum().cumsum()\nUserAchievements_GM_comp = Competitions.resample('D').sum().cumsum()\nUserAchievements_GM_data = Datasets.resample('D').sum().cumsum()\nUserAchievements_GM_note = Scripts.resample('D').sum().cumsum()\nUserAchievements_GM_disc = Discussion.resample('D').sum().cumsum()\n\n# fig, ax = plt.subplots(figsize=(20, 7))\n# sns.lineplot(data=UserAchievements_GM_comp, x=UserAchievements_GM_comp.index,  y=UserAchievements_GM_comp[\"one\"],  linewidth = 3, color='magenta',label=\"Competitions\")\n# sns.lineplot(data=UserAchievements_GM_any, x=UserAchievements_GM_any.index,  y=UserAchievements_GM_any[\"one\"],  linewidth = 3, color='#ddaa17',label=\"Total GM\")\n# sns.lineplot(data=UserAchievements_GM_note, x=UserAchievements_GM_note.index,  y=UserAchievements_GM_note[\"one\"],  linewidth = 3, color='green',label=\"Notebooks\")\n# sns.lineplot(data=UserAchievements_GM_disc, x=UserAchievements_GM_disc.index,  y=UserAchievements_GM_disc[\"one\"],  linewidth = 3, color='red',label=\"Discussions\")\n# sns.lineplot(data=UserAchievements_GM_data, x=UserAchievements_GM_data.index,  y=UserAchievements_GM_data[\"one\"],  linewidth = 3, color='blue',label=\"Datasets\")\n# ax.set(xlabel='Year', ylabel='Number of GM')\n# # reordering the labels\n# handles, labels = plt.gca().get_legend_handles_labels()\n# # specify order\n# order = [1,0,2,3,4]\n# # pass handle & labels lists along with order as below\n# plt.legend([handles[i] for i in order], [labels[i] for i in order]);",
      "total-ns": 44099057307
    },
    {
      "raw": "n_top = 10\n\nCompetitions_Top_n = Competitions.sort_values(by='TotalGold', ascending=False).head(n_top).copy()\nCompetitions_Top_n  = pd.merge(Competitions_Top_n, Users_GM, left_on = ['UserId'], right_on = ['Id'], how='left')\n\n# replace GM_Id by display name\nCompetitions_Top_n[\"User\"] = Competitions_Top_n.UserName.map(lambda x: make_clickable_link(x))\nCompetitions_Top_n_styled  = Competitions_Top_n[[\"User\",\"TotalGold\"]].sort_values(by='TotalGold', ascending=False).style.bar(subset=['TotalGold'], vmin=0, color='#ddaa17')\nCompetitions_Top_n_styled.hide_index()",
      "total-ns": 13503871
    },
    {
      "raw": "Datasets_Top_n = Datasets.sort_values(by='TotalGold', ascending=False).head(n_top).copy()\nDatasets_Top_n  = pd.merge(Datasets_Top_n, Users_GM, left_on = ['UserId'], right_on = ['Id'], how='left')\n\n# replace GM_Id by display name\nDatasets_Top_n[\"User\"] = Datasets_Top_n.UserName.map(lambda x: make_clickable_link(x))\nDatasets_Top_n_styled  = Datasets_Top_n[[\"User\",\"TotalGold\"]].sort_values(by='TotalGold', ascending=False).style.bar(subset=['TotalGold'], vmin=0, color='#ddaa17')\nDatasets_Top_n_styled.hide_index()",
      "total-ns": 6881950
    },
    {
      "raw": "Scripts_Top_n = Scripts.sort_values(by='TotalGold', ascending=False).head(n_top).copy()\nScripts_Top_n  = pd.merge(Scripts_Top_n, Users_GM, left_on = ['UserId'], right_on = ['Id'], how='left')\n\n# replace GM_Id by display name\nScripts_Top_n[\"User\"] = Scripts_Top_n.UserName.map(lambda x: make_clickable_link(x))\nScripts_Top_n_styled  = Scripts_Top_n[[\"User\",\"TotalGold\"]].sort_values(by='TotalGold', ascending=False).style.bar(subset=['TotalGold'], vmin=0, color='#ddaa17')\nScripts_Top_n_styled.hide_index()",
      "total-ns": 7631277
    },
    {
      "raw": "Discussion_Top_n = Discussion.sort_values(by='TotalGold', ascending=False).head(n_top).copy()\nDiscussion_Top_n  = pd.merge(Discussion_Top_n, Users_GM, left_on = ['UserId'], right_on = ['Id'], how='left')\n\n# replace GM_Id by display name\nDiscussion_Top_n[\"User\"] = Discussion_Top_n.UserName.map(lambda x: make_clickable_link(x))\nDiscussion_Top_n_styled  = Discussion_Top_n[[\"User\",\"TotalGold\"]].sort_values(by='TotalGold', ascending=False).style.bar(subset=['TotalGold'], vmin=0, color='#ddaa17')\nDiscussion_Top_n_styled.hide_index()",
      "total-ns": 5890253
    }
  ]
}