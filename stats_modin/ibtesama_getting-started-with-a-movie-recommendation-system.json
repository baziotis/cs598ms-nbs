{
  "cells": [
    {
      "raw": "import os\n\nimport os\nos.environ[\"MODIN_ENGINE\"] = \"ray\"\nimport ray\nos.environ['MODIN_CPUS'] = \"4\"\nray.init(num_cpus=4, runtime_env={'env_vars': {'__MODIN_AUTOIMPORT_PANDAS__': '1'}})\nimport modin.pandas as pd\nimport numpy as np \ndf1=pd.read_csv('../input/tmdb-movie-metadata/tmdb_5000_credits.csv')\ndf2=pd.read_csv('../input/tmdb-movie-metadata/tmdb_5000_movies.csv')",
      "total-ns": 12480391261
    },
    {
      "raw": "factor = 50\nif \"IREWR_LESS_REPLICATION\" in os.environ and os.environ[\"IREWR_LESS_REPLICATION\"] == \"True\":\n    factor = factor//3\ndf1 = pd.concat([df1]*factor, ignore_index=True)\ndf1.info()",
      "total-ns": 1360120507
    },
    {
      "raw": "df1.columns = ['id','tittle','cast','crew']\ndf2= df2.merge(df1,on='id')",
      "total-ns": 32304298579
    },
    {
      "raw": "df2.head(5)",
      "total-ns": 55853115706
    },
    {
      "raw": "C= df2['vote_average'].mean()\nC",
      "total-ns": 1032780835
    },
    {
      "raw": "m= df2['vote_count'].quantile(0.9)\nm",
      "total-ns": 629548120
    },
    {
      "raw": "q_movies = df2.copy().loc[df2['vote_count'] >= m]\nq_movies.shape",
      "total-ns": 1880041286
    },
    {
      "raw": "def weighted_rating(x, m=m, C=C):\n    v = x['vote_count']\n    R = x['vote_average']\n    # Calculation based on the IMDB formula\n    return (v/(v+m) * R) + (m/(m+v) * C)",
      "total-ns": 1206475
    },
    {
      "raw": "# Define a new feature 'score' and calculate its value with `weighted_rating()`\nq_movies['score'] = q_movies.apply(weighted_rating, axis=1)",
      "total-ns": 610341463
    },
    {
      "raw": "#Sort movies based on score calculated above\nq_movies = q_movies.sort_values('score', ascending=False)\n\n#Print the top 15 movies\nq_movies[['title', 'vote_count', 'vote_average', 'score']].head(10)",
      "total-ns": 2004786249
    },
    {
      "raw": "pop= df2.sort_values('popularity', ascending=False)\nimport matplotlib.pyplot as plt\n# STEFANOS: Disable plotting\n# plt.figure(figsize=(12,4))\n\n# plt.barh(pop['title'].head(6),pop['popularity'].head(6), align='center',\n#         color='skyblue')\n# plt.gca().invert_yaxis()\n# plt.xlabel(\"Popularity\")\n# plt.title(\"Popular Movies\")\n",
      "total-ns": 5073081344
    },
    {
      "raw": "df2['overview'].head(5)",
      "total-ns": 5075371
    },
    {
      "raw": "#Import TfIdfVectorizer from scikit-learn\n# STEFANOS: Remove unneeded modules.\n# from sklearn.feature_extraction.text import TfidfVectorizer\n\n#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\n# STEFANOS: non-Pandas. The code that uses it is disabled.\n# tfidf = TfidfVectorizer(stop_words='english')\n\n#Replace NaN with an empty string\ndf2['overview'] = df2['overview'].fillna('')\n\n# STEFANOS: non-Pandas. The code that uses it is disabled.\n# #Construct the required TF-IDF matrix by fitting and transforming the data\n# tfidf_matrix = tfidf.fit_transform(df2['overview'])\n\n# #Output the shape of tfidf_matrix\n# tfidf_matrix.shape",
      "total-ns": 1920089128
    },
    {
      "raw": "# STEFANOS: This takes an inordinate amount of memory and it's not Pandas.\n# Because we're not using get_recommendations(), we're fine\n\n# # Import linear_kernel\n# from sklearn.metrics.pairwise import linear_kernel\n\n# # Compute the cosine similarity matrix\n# cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)",
      "total-ns": 409520
    },
    {
      "raw": "#Construct a reverse map of indices and movie titles\n# STEFANOS: Don't drop duplicates.\n# indices = pd.Series(df2.index, index=df2['title']).drop_duplicates()",
      "total-ns": 179929
    },
    {
      "raw": "# Function that takes in movie title as input and outputs most similar movies\n\n# STEFANOS: get_recommendations() fails to run sometimes and it's not Pandas\n# def get_recommendations(title, cosine_sim=cosine_sim):\n#     # Get the index of the movie that matches the title\n#     idx = indices[title]\n\n#     # Get the pairwsie similarity scores of all movies with that movie\n#     sim_scores = list(enumerate(cosine_sim[idx]))\n\n#     # Sort the movies based on the similarity scores\n#     # STEFANOS: This doesn't run\n# #     sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n#     sim_scores = sorted(sim_scores, key=lambda x: x[1].any(), reverse=True)\n\n#     # Get the scores of the 10 most similar movies\n#     sim_scores = sim_scores[1:11]\n\n#     # Get the movie indices\n#     movie_indices = [i[0] for i in sim_scores]\n\n#     # Return the top 10 most similar movies\n#     return df2['title'].iloc[movie_indices]",
      "total-ns": 434623
    },
    {
      "raw": "# STEFANOS: get_recommendations() fails to run sometimes and it's not Pandas\n# get_recommendations('The Dark Knight Rises')",
      "total-ns": 218461
    },
    {
      "raw": "# STEFANOS: get_recommendations() fails to run sometimes and it's not Pandas\n# get_recommendations('The Avengers')",
      "total-ns": 140386
    },
    {
      "raw": "# Parse the stringified features into their corresponding python objects\nfrom ast import literal_eval\n\nfeatures = ['cast', 'crew', 'keywords', 'genres']\nfor feature in features:\n    df2[feature] = df2[feature].apply(literal_eval)",
      "total-ns": 242131511474
    },
    {
      "raw": "# Get the director's name from the crew feature. If director is not listed, return NaN\ndef get_director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan",
      "total-ns": 7276963
    },
    {
      "raw": "# Returns the list top 3 elements or entire list; whichever is more.\ndef get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        #Check if more than 3 elements exist. If yes, return only first three. If no, return entire list.\n        if len(names) > 3:\n            names = names[:3]\n        return names\n\n    #Return empty list in case of missing/malformed data\n    return []",
      "total-ns": 1916747
    },
    {
      "raw": "# Define new director, cast, genres and keywords features that are in a suitable form.\ndf2['director'] = df2['crew'].apply(get_director)\n\nfeatures = ['cast', 'keywords', 'genres']\nfor feature in features:\n    df2[feature] = df2[feature].apply(get_list)",
      "total-ns": 55126165889
    },
    {
      "raw": "# Print the new features of the first 3 films\ndf2[['title', 'cast', 'director', 'keywords', 'genres']].head(3)",
      "total-ns": 60176535
    },
    {
      "raw": "# Function to convert all strings to lower case and strip names of spaces\ndef clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''",
      "total-ns": 142619634
    },
    {
      "raw": "# Apply clean_data function to your features.\nfeatures = ['cast', 'keywords', 'director', 'genres']\n\nfor feature in features:\n    df2[feature] = df2[feature].apply(clean_data)",
      "total-ns": 6294366349
    },
    {
      "raw": "def create_soup(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])\ndf2['soup'] = df2.apply(create_soup, axis=1)",
      "total-ns": 66087416453
    }
  ]
}