{
  "cells": [
    {
      "raw": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('../input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
      "total-ns": 1202106571
    },
    {
      "raw": "# importing the necessary libraries for EDA on Airline Dataset | Kaggle Dataset\n\nimport pandas as pd \nimport numpy as np",
      "total-ns": 343663
    },
    {
      "raw": "# loading the dataset and showing first 5 rows of the dataset\n\ndf = pd.read_csv(\"../input/Airline Dataset.csv\")\ndf.head(5)",
      "total-ns": 377548859
    },
    {
      "raw": "# Getting the info on the dataset\ndf.info()",
      "total-ns": 126204372
    },
    {
      "raw": "#  Top 20 Country with count of Visitors \n\ndf['Country Name'].value_counts().head(20)",
      "total-ns": 4808793
    },
    {
      "raw": "# Vizualizing the previous cell \n\ntop_20_countries_df =  df['Country Name'].value_counts().head(20)\ntop_20_countries_df = pd.DataFrame({'Country Name': top_20_countries_df.index, 'Count': top_20_countries_df.values})\ntop_20_countries_df = top_20_countries_df.sort_values(by='Count', ascending=True)",
      "total-ns": 6330425
    },
    {
      "raw": "# Ratio between Male Travellers and Female Travellers\n\nTravl_Ratio =  df['Gender'].value_counts()\nTravl_Ratio = pd.DataFrame({'Gender': Travl_Ratio.index, 'Count': Travl_Ratio.values})",
      "total-ns": 4894485
    },
    {
      "raw": "# Total number of Pilots per country \n\nPilot_df = df[['Country Name', 'Pilot Name']]\npilot_pivot = pd.pivot_table(Pilot_df, index=['Country Name'], aggfunc='count')\npilot_pivot.rename(columns={'Pilot Name':'Pilot Count'}, inplace=True)\npilot_pivot = pilot_pivot.reset_index()\npilot_pivot.sort_values(by='Pilot Count', ascending=False, inplace=True)\npilot_pivot.head(10)",
      "total-ns": 21027233
    },
    {
      "raw": "df.head(5)",
      "total-ns": 351207
    },
    {
      "raw": "# Shoes the Count of travellers per Flight Status by Country for the entire duration in the dataset\n\nFlight_status_df = df[['Country Name','Flight Status']]\nFlight_status_df['FTE'] = 1\n\n# Creating a Pivot table by Country with Count of Travellers per Flight Status  \nFlight_status_pivot = pd.pivot_table(Flight_status_df, index=['Country Name'], columns=['Flight Status'], values = ['FTE'], aggfunc='count')\nFlight_status_pivot = Flight_status_pivot.reset_index()\nFlight_status_pivot.head(11)",
      "total-ns": 24144650
    },
    {
      "raw": "# Removing the Spaces on the column names and replacing it with (-) \n# Refrencing the dataframe to another variable (df2)\n\ndf.columns = df.columns.str.replace(' ', '_')\ndf2 = df\ndf2\n\n# Quering on the data based on Airport Country Code (United States) \nUS_data = df2.query('Airport_Country_Code == \"US\"')\n\n\nUS_data",
      "total-ns": 11042472
    },
    {
      "raw": "#  The Departure Date is an Object, converting it into Date-time format and extracting Quarter, month and Week \n\nUS_data['Date'] = pd.to_datetime(US_data['Departure_Date']) \n\n# Extract quarter, month, week\n\nUS_data['Quarter'] = US_data['Date'].dt.quarter\nUS_data['Month'] = US_data['Date'].dt.month\nUS_data['Week'] = US_data['Date'].dt.isocalendar().week\nUS_data\n\n#  So Now we have a data_set that only has values for United States for further EDA",
      "total-ns": 19746659
    },
    {
      "raw": "#  Creating a Customer Column based on Departure and Arrival Airport \nUS_data['Route'] = US_data['Airport_Name'].str.cat(US_data['Arrival_Airport'], sep=' -to- ')\n\nUS_Flight_Route = US_data['Route'].value_counts()\nUS_Flight_Route = pd.DataFrame({'Route': US_Flight_Route.index, 'Count': US_Flight_Route.values})\nTop_20_US_Flight_Route = US_Flight_Route.head(20)\n",
      "total-ns": 10852110
    },
    {
      "raw": "Top_20_US_Flight_Route",
      "total-ns": 281339
    },
    {
      "raw": "# Figuring out the total number of flight per month \n\n\nfiltered_df = df[['Airport_Name','Departure_Date','Arrival_Airport','Pilot_Name']]\nfiltered_df1 = pd.DataFrame(filtered_df)\nfiltered_df1_no_duplicates = filtered_df1.drop_duplicates()\nfiltered_df1_no_duplicates['Date'] = pd.to_datetime(filtered_df1_no_duplicates['Departure_Date']) \n\n# Extracting month\nfiltered_df1_no_duplicates['Month'] = filtered_df1_no_duplicates['Date'].dt.month\nfiltered_df1_no_duplicates",
      "total-ns": 61213987
    },
    {
      "raw": "# Table for Total number of flight per month (This included all flight status)\n\nfiltered_df1_no_duplicates\nTotal_flights = filtered_df1_no_duplicates['Month'].value_counts()\nTotal_flights = Total_flights.reset_index()\nTotal_flights.sort_values(by='index', ascending=True, inplace=True)\nTotal_flights",
      "total-ns": 2246411
    },
    {
      "raw": "#  Getting the Average number of flights per month \n\nAverage_Flight = np.mean(Total_flights['Month'])\nAverage_Flight",
      "total-ns": 634033
    },
    {
      "raw": "# Ratio of Visitors per Nations/Country of Origin\n\nVisitors_per_nations = df['Nationality'].value_counts()\nVisitors_per_nations.head()\nVisitors_per_nations_1 = Visitors_per_nations.head(20).reset_index()\nVisitors_per_nations_1.sort_values(by='Nationality', ascending=False, inplace=True)\nVisitors_per_nations_1.head(5)",
      "total-ns": 5984582
    },
    {
      "raw": "FL_state = df[['Departure_Date','Flight_Status']]\nFL_state['Date']  = pd.to_datetime(FL_state['Departure_Date'])\nFL_state['Month'] = FL_state['Date'].dt.month\nFL_state",
      "total-ns": 18654862
    }
  ]
}